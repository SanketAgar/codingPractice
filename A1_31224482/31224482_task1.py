"""
FIT 9136 Assignment 1
Made by : Sanket Agarwal
Student ID : 31224482
Updated on : 01/05/2020

Simulating an Inventory system : Task 2
The task 2 inventory system simulates the total revenue and stock for the cantilever umbrella at an australian firm.
The code loops through every day between the desired period and keeps track of the distribution numbers and the total
revenue generated from the distributions. It also tracks refurbished items and resells them at 80% of the original
price.  The code needs the starting values in the form of a text document called AU_INV_START.txt and outputs the
results in a text document called AU_INV_END.
"""



import math

"""The read_data function reads the input from the file AU_INV_START.txt"""
def read_file():
    initial_value = {}
    with open('AU_INV_START.txt', 'r') as file:
        initial_value['start_year'] = int(file.readline().strip())  #accepting the value of the start year which is the first line
        initial_value['start_stock'] = int(file.readline().strip())  #accepting the value of the start stock which is the second line
        initial_value['start_revenue'] = int(file.readline().strip())  #accepting the value of the start_revenue which is on the third line
    return initial_value


"""The cal_stock_revenue calculates the revenue generated by the company in the given period based on multiple factors."""
def cal_stock_revenue(initial_value):
    start_year = read_file()['start_year']      #assigning a more readable variable to the read data for start year
    current_stock = read_file()['start_stock']      #assigning a more readable variable to the read data for start stock
    total_revenue = read_file()['start_revenue']        #assigning a more readable variable to the read data for start revenue

    month = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October',
             'November','December']      #creating a list of months

    day_list = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]     #creating a list of max days of each month

    NO_YEAR_SIM = 1     #variable for the number of year the simulation will run for after the start date.
    PER_DEF = 5         #the percentage of products that can be defective.
    CRIS_RECUR_FREQUENCY = 9      #the financial crisis re occurrence frequency in years
    year = 0  # variable to maintain year loop
    month_number = 0  # variable to maintain month loop
    day = 0  # variable to maintain day loop
    base_year = 2000  # the year the company was started, it is used to track rrp, distribution and financial crisis
    max_day = 0  # tracks the max number of days in a month
    is_leap_year = 0  # boolean check to see if a year is leap year or not
    current_RRP = 705  # current RRP of the product
    current_dist = 36  # current dist of the product
    peak_season = 1  # boolean to track if peak season is on or not
    crisis_year_count = 0  # The crisis year count keeps track of how many times the financial crisis has happened
    financial_crisis_status = 0  # boolean to check if the financial crisis is currently on
    month_dist = 0  # The month distribution number tracks the number of items distributed each month to calculate defective items
    partial_dist = 0  # The partial distribution number is used when a day shares distribution stock from both refurbished and new stock
    defective_month = 0  # The defective number handles the total number of defective items for the month.
    total_defective_stock = 0  # tracks defective stock
    total_defective_revenue = 0  # tracks revenue generated by defective stock
    restock_value = 600  # The number of umbrellas restocked when the stock goes below 400
    total_year_sim = (start_year - base_year) + NO_YEAR_SIM

    for year in range(0, total_year_sim):       #looping through every year the simulation has to run for
        current_year = base_year + year         #updating the current year
        if current_year % 4 == 0:               #checking for leap year and updating values
            day_list[1] = 29
        else:
            day_list[1] = 28
        financial_crisis = current_year - base_year - (2 * financial_crisis_status)  #updating financial crisis variable in case of multiple crisis
        if financial_crisis % CRIS_RECUR_FREQUENCY == 0 and financial_crisis_status == 0 and current_year != base_year:     #checking for financial crisis and updating values
            print("***** The financial crisis has begun *****")
            current_RRP = current_RRP + (current_RRP / 10)
            current_dist = current_dist - (current_dist / 5)
            current_dist = math.ceil(current_dist)
            financial_crisis_status = financial_crisis_status + 1
        elif financial_crisis % CRIS_RECUR_FREQUENCY == 1 and financial_crisis_status == 1:  #checking for second year of crisis and updating values
            print("***** Second Year of financial crisis *****")
            current_RRP = current_RRP + (current_RRP / 20)
            current_dist = current_dist - (current_dist / 10)
            current_dist = math.ceil(current_dist)
        elif financial_crisis % CRIS_RECUR_FREQUENCY == 2 and financial_crisis_status == 1:    #checking for third year of crisis and updating the values
            print("***** Third Year of financial crisis *****")
            current_RRP = current_RRP + (current_RRP * 0.03)
            current_dist = current_dist - (current_dist / 20)
            current_dist = math.ceil(current_dist)
            financial_crisis_status = 0
            financial_crisis_status = financial_crisis_status + 1
        else:
            print("This year is crisis proof")

        print(current_year)
        print("The total revenue of the company till now is : " + str(total_revenue))

        for month_number in range(0, 12):                    # looping through the months
            currMonth = month[month_number]                  # updating month name
            month_dist = 0                                   # resetting month distribution number at start of new month
            print(currMonth + str(current_year))
            if (month_number == 0 or month_number == 1 or month_number == 10 or month_number == 11) and peak_season == 0:            #checking for and updating values for peak season
                current_RRP = current_RRP + (current_RRP / 5)
                current_dist = current_dist + (current_dist / 2.85)
                peak_season = 1
                print("*****PEAK SEASON*****")
                print("***** %.2f *****" % current_RRP)
                print("*****" + str(current_dist) + "*****")
            elif month_number == 2 and peak_season == 1:                    #checking for and updating values for peak season
                current_RRP = (current_RRP / 120) * 100
                current_dist = (current_dist / 135) * 100
                peak_season = 0
                print("*****END OF PEAK SEASON*****")
                print("***** %.2f *****" % current_RRP)
                print("*****" + str(current_dist) + "*****")
            elif month_number == 6:                                          #checking for new financial year
                current_RRP = current_RRP + (current_RRP / 20)
                current_dist = current_dist + (current_dist / 10)
                print("***** NEW FINANCIAL YEAR STARTS*****")
                print("***** %.2f *****" % current_RRP)
                print("*****" + str(current_dist) + "*****")
            else:
                print("***** %.2f *****" % current_RRP)
                print("*****" + str(current_dist) + "*****")

            max_day = day_list[month_number]  # fetching maximum days for the current month
            for day in range(1, max_day + 1):  # looping through the days
                print(day)

                if current_year == start_year:      #checking for year end to stop code
                    if day == max_day:
                        defective_month = month_dist / 20
                        defective_month = math.ceil(defective_month)
                        defectiveRRP = current_RRP * 0.8
                        total_revenue = total_revenue + (current_RRP * current_dist)
                        print("This month's defective stock is returned. The number of defective items is : " + str(
                            defective_month) + " The resale value of this stock is %0.2f" % defectiveRRP)

                    if defective_month > 0 and defective_month >= current_dist:  # checking if the defective stock can supply for the whole day
                        defective_month = defective_month - current_dist
                        total_revenue = total_revenue + (defectiveRRP * current_dist)
                    elif 0 < defective_month < current_dist:  # splitting distribution between defective stock and current stock
                        total_revenue = total_revenue + (defective_month * defectiveRRP)
                        partial_dist = current_dist - defective_month
                        defective_month = 0
                        current_stock = current_stock - partial_dist
                        total_revenue = total_revenue + (partial_dist + current_RRP)
                        month_dist = month_dist + partial_dist
                    else:  # in case of no defective stock, supplying only from current stock.
                        current_stock = current_stock - current_dist
                        month_dist = month_dist + current_dist
                        total_revenue = total_revenue + (current_dist * current_RRP)

                else :
                    print("Not counting")

                if current_stock < 400:                     #checking for stock restock criteria
                    current_stock = current_stock + 600
                    print("*****STOCK REPLENISHED*****")

    print("The total revenue is : %0.2f" % total_revenue + " The end of year stock is : " + str(
        current_stock))


    end_sim = {'end_year': current_year, 'end_stock': current_stock, 'end_revenue': total_revenue}
    return end_sim


"""The write_data function creates a file called AU_INV_END called write_data"""
def write_data(end_sim):   #The write data function needs the dictionary variable end_sim to run
    data_print = open('AU_INV_END.txt', 'w')
    data_print.write(
        (str(end_sim['end_year'])) + "\n" + (str(math.ceil(end_sim['end_stock']))) + "\n" + "%0.2f" % end_sim['end_revenue'])
    data_print.close()


write_data(cal_stock_revenue(read_file()))
